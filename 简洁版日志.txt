/***************************************LLDP*****************************************/
1.LLDP简介
LLDP（link layer discovery Protocol）：链路层发现协议的简称，几乎所有以太网交换机都内置了这个功能。通过采用LLDP技术，在网络规模迅速扩大时，网管系统可以快速掌握二层
网络拓扑信息和拓扑变化信息。	

2.LLDP原理如下：
a.交换机定期通过LLDP报文对外广播自己的设备类型、端口编号等信息，交换机不会转发lldp报文，但是会在链路上侦听其他设备发送过来的lldp数据，
并在一定时限的有效期内存储在在交换机MIB中，可以供SNMP查询，进而掌握自己邻居的大致情况。
b.LLDP报文数据段是以TLV的格式定义的，分别说明了数据是哪方面信息，长度以及本身的内容。

总体来说LLDP主要工作有以下几个方面：
•  初始化并维护本地 MIB库中的信息。 
•  从本地MIB库中提取信息，并将信息封装到LLDP帧中，以一定的时间间隔或者当设备状态发生变化时，将LLDP帧发送出去，通告邻接设备。 
•  对收到的LLDP帧进行确认和处理。 
•  通过收到的LLDP帧维护远端设备LLDP MIB信息库。 
•  当Local System MIB或Remote System MIB中有信息发生变化时，向网管上报。



/***************************************netconf*****************************************/
1.netconf（The Network Configuration Protocol）可以理解为一种通用的协议，为网管和设备之间提供了一套协议，网管通过netconf协议可以实现本地管理，对远端设备的配置进行下发，
修改和删除等操作。(Yang是netconf协议的一种数据建模语言)

2.交换机上的netconf实现：
a.Confd进程：NETCONF协议解析者，NETCONF协议引擎
b.RPA进程：python实现的NETCONF协议南向进程
c.VRP进程：交换机各种转发业务，对外提供命令行界面

3.	Sysname是如何下发的？
需要注意的是，由于VRP是交换机的业务主体，因此修改sysname的操作实际是从VRP进程中生效。让我们回想NETCONF的整体概念图，可知sysname的下发分如下几步：
a)	yangsh(NETCONF client)中，响应commit命令，发现sysname发生变化。yangsh将变化组织为符合NETCONF协议的XML报文，发送至confd进程
b)	confd进程解析收到的NETCONF协议报文，并与数据库中的配置比对，发现sysname发生变更。
c)	confd检索关注/huawei-device:device/name节点变更的南向plugin，发现RPA关注此变更。通知RPA进程节点变更事件。
d)	RPA收到此节点变更事件后，与confd进行多次交互，得知sysname变化为HUAWEI-F5。
e)	RPA进程中调用具体的plugin实现，并将sysname变更的xml作为参数传递给plugin。
f)	plugin解析此变化，并把sysname组织成命令行sysname HUAWEI-F5配置到VRP进程，同时将结果返回。
g)	RPA进程收到plugin的返回结果，再将结果通知给confd进程。
h)	confd进程根据RPA的结果刷新数据库，并将结果组织成标准的NETCONF协议发回yangsh
i)	yansh显示出成果的消息。

4.netconf协议框架：
a.传输层(BEEP,SSH,SSL协议)
b.RPC层(<rpc>,<rpc-reply>)
c.操作层（<get-config>,<edit-config>,<notification>)
d.内容层(配置数据)

5.网管与交换机通过netconf协议进行通信的交互流程：
a.交换机与网管建立SSH连接。(SSH:secure shell建立在应用层和传输从基础之上的安全协议，可以有效防止远程管理过程中的信息泄露问题)
b.交换机与网管通过Hello报文交换双方支持的能力。
c.网管与交换机建立NETCONF会话后，即可发送RPC操作请求至交换机，进行配置管理。
d.交换机对收到的RPC操作请求进行解析与处理，并发送RPC应答给网管。
e.操作完成后，网管可以发送关闭NETCONF会话的RPC请求，以节省交换机和网管不必要的资源开销。
f.交换机关闭NETCONF会话，并发送RPC应答给网管。

5.netconf支持的数据库
<running/>存储设备上正在运行的生效配置。该数据库中的配置可以单点修改，任何修改都会立即生效。该数据库是唯一强制要求的标准数据库。
<candidate/>存储没有生效的候选配置数据库。该数据库中的配置可以单点修改，任何修改都不会立即生效。标准能力Candidate Configuration支持的数据库。
<startup/>存储系统下次启动时生效的配置。该数据库中的配置无法单点修改，只能通过<copy-config>操作整体替换。标准能力Distinct Startup支持的数据库。
三者之间的关系：
•对<candidate/>的修改，必须执行<commit>操作将其提交至<running/>才能生效。
•系统启动时会自动将<startup/>中的配置拷贝至<running/>。
•三者之间可以通过<copy-config>操作进行整体替换。

base定义的操作
<get-config> 
用来从<running/>、<candidate/>和<startup/>数据库中获取全部或部分配置数据。
<get> 
用来从<running/>数据库中获取全部或部分运行配置数据或设备的状态数据。
<edit-config> 
用来对<running/>或<candidate/>数据库新增、修改、删除配置数据。
<copy-config> 
用源数据库替换目标数据库。如果目标数据库没有创建，则直接创建数据库，然后进行拷贝。
<delete-config> 
用来删除一个数据库，但不能删除<running/>数据库。
<lock> 
用来锁定一个数据库，独占数据库的修改权限，防止多用户并行操作设备产生冲突。
<unlock> 
用来取消用户自己之前执行的<lock>操作，但不能取消其他用户的<lock>操作。
<close-session> 
用来正常关闭NETCONF会话。
<kill-session> 
用来强制关闭NETCONF会话，只有管理员用户才有权限执行<kill-session>操作。

表2 NETCONF定义的标准能力及操作
Writable-Running能力
该能力表明设备支持对<running/>数据库进行<edit-config>和<copy-config>操作。
 
Candidate Configuration能力
该能力表明设备支持<candidate/>数据库。Candidate Configuration能力被用来在不影响<running/>的情况下，对<candidate/>中的配置数据进行操作。
<commit>：将<candidate/>数据库中的所有数据全部提交，转化为设备当前运行的配置数据。
<discard-changes>：放弃执行<candidate/>数据库中还未提交的配置数据，使<candidate/>数据库中的配置数据恢复到与当前<running/>数据库中的配置数据一致。
 
Rollback on Error能力
该能力表明设备具备错误回滚能力。如果<edit-config>操作时产生一个错误元素<rpc-error>，网管将会停止<edit-config>操作，并把配置恢复至执行<edit-config>操作前的状态。
 
Distinct Startup能力
该能力表明设备具备独立启动的能力、支持<startup/>数据库。

Notification能力
该能力表明设备支持发送告警和事件给网管，网管通过收到的告警和事件对设备进行管理。
<notification>：设备主动上报告警和事件给网管。
 
Interleave能力
该能力表明设备支持NETCONF会话多功能重用。用户可在同一个NETCONF会话上同时对设备进行维护操作和告警、事件管理，提升管理效率。
 
 6.netconf交换机界面的配置（详情见产品手册）
 操作步骤
1.执行命令system-view，进入系统视图。
2.执行命令netconf，使能NETCONF功能并进入NETCONF视图。
3.执行命令source ip ip-address [ port port-number ]，配置交换机与网管进行NETCONF通信时使用的IPv4地址及端口号。 
4.执行命令callhome callhome-name，创建callhome模板并进入callhome模板视图。 
5.执行命令ip address ip-address port port-number，配置与交换机进行NETCONF通信的网管的IPv4地址及端口号。 


/***************************************TCP/IP*****************************************/
1.TCP/IP网络管理协议标准可以分为三大部分：
SNMP为简单的网络管理协议，属于TCP/IP五层协议中的应用层协议。
SNMP的基本思想：为不同种类的设备、不同厂家生产的设备、不同型号的设备，定义为一个统一的接口和协议，使得管理员可以使用统一
的外观面对这些需要管理的网络设备进行管理。通过网络，管理员可以管理位于不同物理空间的设备，从而大大提高了网络管理效率，简化
网络管理工作。
SNMP的工作方式：管理员需要向设备获取数据，所以SNMP提供了读操作。
管理员需要向设备执行设置操作，所以SNMP提供了写操作。
设备需要在重要状况改变的时候，向管理员通报事件的发生，所以SNMP提供了TRAP操作。

2.MIB（management information base）：可以理解为agent维护的管理对象数据库，MIB中定义的大部分管理对象的状态和统计信息都
可以被NMS访问。
MIB是一个被管理对象的集合，它定义被管理对象的一系列属性，包括：
对象的名字
对象的访问权限
对象的数据类型

3.MIB以树状结构进行存储，树的叶子节点表示管理对象，它可以通过从根节点开始的一条惟一路径来识别，这也就是OID（Object Identifier）。
OID是由一些系列非负整数组成，用于唯一标识管理对象在MIB树中的位置。由SMI来保证OID不会冲突。
MIB文件一旦发布，OID就和被定义的对象绑定，不能修改。MIB节点不能被删除，只能将它的状态置为“obsolete”，表明该节点已经被废除。



/***************************************代码头文件目录*****************************************/
代码中头文件所在目录默认为：code/product这个目录


/***************************************云盒上线基本流程*****************************************/


		堆叠系统							云管理平台
堆叠系统切换为云管理模式		

主交换机向云管理平台注册

								查询堆叠系统状态信息（单机还是堆叠）


发送主交换机系统状态信息

								对比堆叠系统状态和云管理平台设置状态（状态一致，主交换机注册成功，状态不一致，主交换机注册失败）


主交换机注册成功后，上报成员交换机信息

								成员交换机配置比对通过，成员交换机设置注册成功，若槽号不一致，则重启交换机，重新注册



								
/***************************************CMO*****************************************/
命令的分析是一个准备工作，目的在于分析出如何最简单的区分出你所有添加的命令，也就是命令定位。系统定位一条完整命令
是通过 模块——>表——>CMO 这样一层一层定位的，模块不用说，表可以看做是分类的，把命令字分成不同的类,而CMO就是表内的索引。
比如下面的例子假如你要加入这四条命令：a b c、a b d、e f、e h，你可以把前两个分在一个表中，后两个分在另一个表中。
CMO是用来区分同一个表中的不同命令元素的，这里就可以分别给 c,d,f,h定义CMO。
命令行开发的步骤：
a.注册命令处理回调函数 					b.添加CMO    （eg:CFG_CMO_DEF(PID_NETCONF,CMOTBL_NTCF_NTF,1)中分别表示模块号，表号，索引号
													模块号即是本模块，表号为自己申请，比如在CMO上面定义CMOTBL_NTCF_NTF=0X01,索引号
													 代表的是之后命令安装时候用到的$1 $2 $3，将注册的不同命令联系起来）
c.定义元素								d.安装命令
e.注册命令

具体看2019.6月自我总结的 个人版本命令行注册   公司版本-命令行注册word




/***************************************MIB查找*****************************************/
主要在两个文件中entitymib_tree.c
				entityextmib_tree.c
				
有关端口信息的在entPhysicalName中，根据CMO去定位问题。
根据不同的CMO分支，会进入不同的函数




/***************************************IFNET功能*****************************************/
1.IFNET主要功能之一是对系统中的各种接口进行操作和管理（接口创建、删除、查找、属性设置），主要通过命令行的方式实现。
2.IFNET另一个主要功能是实现报文和控制信息在网络层、链路层和物理层之间的传递。



/***************************************环境配置SNMP*****************************************/
<HUAWEI>sys                                                                                                                         
Enter system view, return user view with Ctrl+Z.                                                                                    
[HUAWEI]snmp-agent                                                                                                                  
[HUAWEI]snmp-agent  sys-info version all                                                                                            
Warning: SNMPv1/SNMPv2c is not secure, and it is recommended to use SNMPv3.                                                         
[HUAWEI]snmp-agent community read huawei123                                                                                         
[HUAWEI]snmp-agent community write huawei123


/***************************************PIC卡*****************************************/
框/槽/子卡/端口   都是以父节点往下拓宽的，要查看端口号，就得从子卡上获取。



/***************************************输出显示*****************************************/
如果输出方式是EXEC_OutString或类似这种，通过获取UserId来输出的，两者显示一样
如果是printf类似显示，只显示到串口上




 /***************************************license控制项*****************************************/
 分为软件license：包括基本软件特性和可选软件特性。
 容量license
 
 
  /***************************************yang模型*****************************************/
  1.1模块和子模块
  YANG数据模型在模块中定义。一个模块包含相关定义的集合。
  一个模块包含三种类型的语句：模块头(module header)语句，“修订”(revision)语句和定义(definition)语句。模块头部语句描述模块并提供关于模块本身的信息，
  “修订”语句提供关于模块历史的信息，定义语句是定义数据模型的模块的主体。